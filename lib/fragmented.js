"use strict";

Object.defineProperty(window, "fragment", {
  get: function get() {
    var fragment = getFragment();
    return fragment;
  },
  set: function set(fragment) {
    var silently = false;
    setFragment(fragment, silently);
  }
});
window.addEventListener("hashchange", hashChangeListener);
var fragmentChangeHandlers = [];

function getFragment() {
  var hash = window.location.hash.substr(1),
      ///
  fragment = new String(hash); ///

  Object.assign(fragment, {
    getFragment: getFragment,
    setFragment: setFragment,
    onFragmentChange: onFragmentChange,
    offFragmentChange: offFragmentChange
  });
  return fragment;
}

function setFragment(fragment) {
  var silently = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var hash = fragment; ///

  if (silently) {
    window.removeEventListener("hashchange", hashChangeListener);
  }

  window.location.hash = hash;

  if (silently) {
    setTimeout(function () {
      window.addEventListener("hashchange", hashChangeListener);
    }, 0);
  }
}

function onFragmentChange(fragmentChangeHandler) {
  fragmentChangeHandlers.push(fragmentChangeHandler);
}

function offFragmentChange(fragmentChangeHandler) {
  var index = fragmentChangeHandlers.indexOf(fragmentChangeHandler);

  if (index > -1) {
    var start = index,
        ///
    deleteCount = 1;
    fragmentChangeHandlers.splice(start, deleteCount);
  }
}

function hashChangeListener() {
  var hash = window.location.hash.substr(1),
      ///
  fragment = hash; ///

  fragmentChangeHandlers.forEach(function (fragmentChangeHandler) {
    fragmentChangeHandler(fragment);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyYWdtZW50ZWQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJnZXQiLCJmcmFnbWVudCIsImdldEZyYWdtZW50Iiwic2V0Iiwic2lsZW50bHkiLCJzZXRGcmFnbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYXNoQ2hhbmdlTGlzdGVuZXIiLCJmcmFnbWVudENoYW5nZUhhbmRsZXJzIiwiaGFzaCIsImxvY2F0aW9uIiwic3Vic3RyIiwiU3RyaW5nIiwiYXNzaWduIiwib25GcmFnbWVudENoYW5nZSIsIm9mZkZyYWdtZW50Q2hhbmdlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJmcmFnbWVudENoYW5nZUhhbmRsZXIiLCJwdXNoIiwiaW5kZXgiLCJpbmRleE9mIiwic3RhcnQiLCJkZWxldGVDb3VudCIsInNwbGljZSIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE1BQXRCLEVBQThCLFVBQTlCLEVBQTBDO0FBQ3hDQyxFQUFBQSxHQUFHLEVBQUUsZUFBVztBQUNkLFFBQU1DLFFBQVEsR0FBR0MsV0FBVyxFQUE1QjtBQUVBLFdBQU9ELFFBQVA7QUFDRCxHQUx1QztBQU94Q0UsRUFBQUEsR0FBRyxFQUFFLGFBQVNGLFFBQVQsRUFBbUI7QUFDdEIsUUFBTUcsUUFBUSxHQUFHLEtBQWpCO0FBRUFDLElBQUFBLFdBQVcsQ0FBQ0osUUFBRCxFQUFXRyxRQUFYLENBQVg7QUFDRDtBQVh1QyxDQUExQztBQWNBTCxNQUFNLENBQUNPLGdCQUFQLENBQXdCLFlBQXhCLEVBQXNDQyxrQkFBdEM7QUFFQSxJQUFNQyxzQkFBc0IsR0FBRyxFQUEvQjs7QUFFQSxTQUFTTixXQUFULEdBQXVCO0FBQ3JCLE1BQU1PLElBQUksR0FBR1YsTUFBTSxDQUFDVyxRQUFQLENBQWdCRCxJQUFoQixDQUFxQkUsTUFBckIsQ0FBNEIsQ0FBNUIsQ0FBYjtBQUFBLE1BQThDO0FBQ3hDVixFQUFBQSxRQUFRLEdBQUcsSUFBSVcsTUFBSixDQUFXSCxJQUFYLENBRGpCLENBRHFCLENBRWU7O0FBRXBDWixFQUFBQSxNQUFNLENBQUNnQixNQUFQLENBQWNaLFFBQWQsRUFBd0I7QUFDdEJDLElBQUFBLFdBQVcsRUFBWEEsV0FEc0I7QUFFdEJHLElBQUFBLFdBQVcsRUFBWEEsV0FGc0I7QUFHdEJTLElBQUFBLGdCQUFnQixFQUFoQkEsZ0JBSHNCO0FBSXRCQyxJQUFBQSxpQkFBaUIsRUFBakJBO0FBSnNCLEdBQXhCO0FBT0EsU0FBT2QsUUFBUDtBQUNEOztBQUVELFNBQVNJLFdBQVQsQ0FBcUJKLFFBQXJCLEVBQWdEO0FBQUEsTUFBakJHLFFBQWlCLHVFQUFOLElBQU07QUFDOUMsTUFBTUssSUFBSSxHQUFHUixRQUFiLENBRDhDLENBQ3RCOztBQUV4QixNQUFJRyxRQUFKLEVBQWM7QUFDWkwsSUFBQUEsTUFBTSxDQUFDaUIsbUJBQVAsQ0FBMkIsWUFBM0IsRUFBeUNULGtCQUF6QztBQUNEOztBQUVEUixFQUFBQSxNQUFNLENBQUNXLFFBQVAsQ0FBZ0JELElBQWhCLEdBQXVCQSxJQUF2Qjs7QUFFQSxNQUFJTCxRQUFKLEVBQWM7QUFDWmEsSUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZmxCLE1BQUFBLE1BQU0sQ0FBQ08sZ0JBQVAsQ0FBd0IsWUFBeEIsRUFBc0NDLGtCQUF0QztBQUNELEtBRlMsRUFFUCxDQUZPLENBQVY7QUFHRDtBQUNGOztBQUVELFNBQVNPLGdCQUFULENBQTBCSSxxQkFBMUIsRUFBaUQ7QUFDL0NWLEVBQUFBLHNCQUFzQixDQUFDVyxJQUF2QixDQUE0QkQscUJBQTVCO0FBQ0Q7O0FBRUQsU0FBU0gsaUJBQVQsQ0FBMkJHLHFCQUEzQixFQUFrRDtBQUNoRCxNQUFNRSxLQUFLLEdBQUdaLHNCQUFzQixDQUFDYSxPQUF2QixDQUErQkgscUJBQS9CLENBQWQ7O0FBRUEsTUFBSUUsS0FBSyxHQUFHLENBQUMsQ0FBYixFQUFnQjtBQUNkLFFBQU1FLEtBQUssR0FBR0YsS0FBZDtBQUFBLFFBQXNCO0FBQ2hCRyxJQUFBQSxXQUFXLEdBQUcsQ0FEcEI7QUFHQWYsSUFBQUEsc0JBQXNCLENBQUNnQixNQUF2QixDQUE4QkYsS0FBOUIsRUFBcUNDLFdBQXJDO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTaEIsa0JBQVQsR0FBOEI7QUFDNUIsTUFBTUUsSUFBSSxHQUFHVixNQUFNLENBQUNXLFFBQVAsQ0FBZ0JELElBQWhCLENBQXFCRSxNQUFyQixDQUE0QixDQUE1QixDQUFiO0FBQUEsTUFBOEM7QUFDeENWLEVBQUFBLFFBQVEsR0FBR1EsSUFEakIsQ0FENEIsQ0FFSjs7QUFFeEJELEVBQUFBLHNCQUFzQixDQUFDaUIsT0FBdkIsQ0FBK0IsVUFBQ1AscUJBQUQsRUFBMkI7QUFDeERBLElBQUFBLHFCQUFxQixDQUFDakIsUUFBRCxDQUFyQjtBQUNELEdBRkQ7QUFHRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCBcImZyYWdtZW50XCIsIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IGdldEZyYWdtZW50KCk7XG5cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbihmcmFnbWVudCkge1xuICAgIGNvbnN0IHNpbGVudGx5ID0gZmFsc2U7XG5cbiAgICBzZXRGcmFnbWVudChmcmFnbWVudCwgc2lsZW50bHkpO1xuICB9XG59KTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJoYXNoY2hhbmdlXCIsIGhhc2hDaGFuZ2VMaXN0ZW5lcik7XG5cbmNvbnN0IGZyYWdtZW50Q2hhbmdlSGFuZGxlcnMgPSBbXTtcblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnQoKSB7XG4gIGNvbnN0IGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSksICAvLy9cbiAgICAgICAgZnJhZ21lbnQgPSBuZXcgU3RyaW5nKGhhc2gpOyAgLy8vXG5cbiAgT2JqZWN0LmFzc2lnbihmcmFnbWVudCwge1xuICAgIGdldEZyYWdtZW50LFxuICAgIHNldEZyYWdtZW50LFxuICAgIG9uRnJhZ21lbnRDaGFuZ2UsXG4gICAgb2ZmRnJhZ21lbnRDaGFuZ2VcbiAgfSk7XG5cbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiBzZXRGcmFnbWVudChmcmFnbWVudCwgc2lsZW50bHkgPSB0cnVlKSB7XG4gIGNvbnN0IGhhc2ggPSBmcmFnbWVudDsgIC8vL1xuXG4gIGlmIChzaWxlbnRseSkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCBoYXNoQ2hhbmdlTGlzdGVuZXIpO1xuICB9XG5cbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuXG4gIGlmIChzaWxlbnRseSkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJoYXNoY2hhbmdlXCIsIGhhc2hDaGFuZ2VMaXN0ZW5lcik7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25GcmFnbWVudENoYW5nZShmcmFnbWVudENoYW5nZUhhbmRsZXIpIHtcbiAgZnJhZ21lbnRDaGFuZ2VIYW5kbGVycy5wdXNoKGZyYWdtZW50Q2hhbmdlSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIG9mZkZyYWdtZW50Q2hhbmdlKGZyYWdtZW50Q2hhbmdlSGFuZGxlcikge1xuICBjb25zdCBpbmRleCA9IGZyYWdtZW50Q2hhbmdlSGFuZGxlcnMuaW5kZXhPZihmcmFnbWVudENoYW5nZUhhbmRsZXIpO1xuXG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGZyYWdtZW50Q2hhbmdlSGFuZGxlcnMuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzaENoYW5nZUxpc3RlbmVyKCkge1xuICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpLCAgLy8vXG4gICAgICAgIGZyYWdtZW50ID0gaGFzaDsgIC8vL1xuXG4gIGZyYWdtZW50Q2hhbmdlSGFuZGxlcnMuZm9yRWFjaCgoZnJhZ21lbnRDaGFuZ2VIYW5kbGVyKSA9PiB7XG4gICAgZnJhZ21lbnRDaGFuZ2VIYW5kbGVyKGZyYWdtZW50KTtcbiAgfSk7XG59XG4iXX0=